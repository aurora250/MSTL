cmake_minimum_required(VERSION 3.17)
project(MSTL LANGUAGES CXX)


if(NOT DEFINED CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 17 CACHE STRING "C++ standard used by MSTL (default: 17)")
endif()
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if(CMAKE_CXX_STANDARD LESS 14)
    message(FATAL_ERROR "MSTL can only be compiled with C++14 or higher standard")
endif()


if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(MSTL_ARCH "x64")
else()
    set(MSTL_ARCH "x86")
endif()
message(STATUS "Current Architecture: ${MSTL_ARCH}")
message(STATUS "C++ Standard Version: ${CMAKE_CXX_STANDARD}")


option(MSTL_ENABLE_BOOST "Enable Boost library support" ON)
option(MSTL_ENABLE_MYSQL "Enable MySQL database support" ON)
option(MSTL_ENABLE_SQLITE3 "Enable SQLite3 database support" ON)
option(MSTL_ENABLE_REDIS "Enable Redis database support" ON)
option(MSTL_ENABLE_QT6 "Enable Qt6 toolchain support" ON)
option(MSTL_ENABLE_CUDA "Enable CUDA GPU acceleration" OFF)
option(MSTL_BUILD_TESTS "Build unit tests (requires GTest)" ON)
option(MSTL_BUILD_EXAMPLES "Build example programs" ON)


message(STATUS "Project Configuration:")
message(STATUS "  MSTL_ENABLE_BOOST:   ${MSTL_ENABLE_BOOST}")
message(STATUS "  MSTL_ENABLE_MYSQL:   ${MSTL_ENABLE_MYSQL}")
message(STATUS "  MSTL_ENABLE_SQLITE3: ${MSTL_ENABLE_SQLITE3}")
message(STATUS "  MSTL_ENABLE_REDIS:   ${MSTL_ENABLE_REDIS}")
message(STATUS "  MSTL_ENABLE_QT6:     ${MSTL_ENABLE_QT6}")
message(STATUS "  MSTL_ENABLE_CUDA:    ${MSTL_ENABLE_CUDA}")

message(STATUS "  MSTL_BUILD_TESTS:    ${MSTL_BUILD_TESTS}")
message(STATUS "  MSTL_BUILD_EXAMPLES: ${MSTL_BUILD_EXAMPLES}")


add_subdirectory(src)

if(MSTL_BUILD_TESTS)
    add_subdirectory(tests)
else()
    message(STATUS "Skipping tests build (MSTL_BUILD_TESTS=OFF)")
endif()

if(MSTL_BUILD_EXAMPLES)
    add_subdirectory(examples)
else()
    message(STATUS "Skipping examples build (MSTL_BUILD_EXAMPLES=OFF)")
endif()


install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/MSTL/
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/MSTL
        FILES_MATCHING PATTERN "*.hpp" PATTERN "*.h"
)

set(INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/MSTL)

include(CMakePackageConfigHelpers)
include(GNUInstallDirs)

write_basic_package_version_file(
        ${CMAKE_CURRENT_BINARY_DIR}/MSTLConfigVersion.cmake
        VERSION 1.3.0
        COMPATIBILITY SameMajorVersion
)

configure_package_config_file(
        ${CMAKE_CURRENT_SOURCE_DIR}/MSTLConfig.cmake.in
        ${CMAKE_CURRENT_BINARY_DIR}/MSTLConfig.cmake
        INSTALL_DESTINATION ${INSTALL_CONFIGDIR}
        PATH_VARS CMAKE_INSTALL_INCLUDEDIR
)


install(FILES
        ${CMAKE_CURRENT_BINARY_DIR}/MSTLConfig.cmake
        ${CMAKE_CURRENT_BINARY_DIR}/MSTLConfigVersion.cmake
        DESTINATION ${INSTALL_CONFIGDIR}
)

install(EXPORT MSTLTargets
        FILE MSTLTargets.cmake
        NAMESPACE MSTL::
        DESTINATION ${INSTALL_CONFIGDIR}
)
